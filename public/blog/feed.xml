<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="http://jekyllrb.com" version="3.4.1">Jekyll</generator><link href="https://operationcode.org/blog/feed.xml" rel="self" type="application/atom+xml" /><link href="https://operationcode.org/blog/" rel="alternate" type="text/html" /><updated>2017-03-04T17:17:37-08:00</updated><id>https://operationcode.org/blog/</id><title type="html">Operation Code Blog</title><subtitle>Operation Code is on a mission to trailblaze a new career path opportunity for military veterans in software development and coding.
</subtitle><entry><title type="html">Meet the random job expert who transitioned into a manager role in Silicon Valley</title><link href="https://operationcode.org/blog/2017/03/01/meet-the-random-job-expert-who-transitioned-into-a-manager-role-in-silicon-valley.html" rel="alternate" type="text/html" title="Meet the random job expert who transitioned into a manager role in Silicon Valley" /><published>2017-03-01T00:00:00-08:00</published><updated>2017-03-01T00:00:00-08:00</updated><id>https://operationcode.org/blog/2017/03/01/meet-the-random-job-expert-who-transitioned-into-a-manager-role-in-silicon-valley</id><content type="html" xml:base="https://operationcode.org/blog/2017/03/01/meet-the-random-job-expert-who-transitioned-into-a-manager-role-in-silicon-valley.html">&lt;p&gt;A search engine introduced Andrea to Operation Code. The former Army personnel manager had long contemplated a career change.&lt;/p&gt;

&lt;p&gt;Meet Andrea, a self-described random job expert. After her service as a U.S. Army Human Resource Specialist she held many jobs and admits, “I never really found that one thing that really drove me.” One day a serendipitous online search resulted in more than she expected.&lt;/p&gt;

&lt;p&gt;“I googled veterans + coding” says Andrea. It listed two results, one of them was Operation Code. As she scrolled the Operation Code webpage she learned that the non-profit organization’s mission is to aid military vets and their families learn code and web technology. She decided to reach out.&lt;/p&gt;

&lt;p&gt;Initially, because she had no previous program experience, she lacked confidence. 
Andrea acknowledged to herself and to others that a new skill would be difficult to learn. Given that her GI Bill benefits had come and gone (without her tapping into them) she specifically sought career advancement resources which wouldn’t cost a lot of money.&lt;/p&gt;

&lt;p&gt;Then Operation Code offered to set her up with a mentor, which they did. According to Conrad Hollomon, Operation Code’s Chief of Staff, mentorship is “absolutely critical” in helping someone reach their greatest potential in the tech industry.&lt;/p&gt;

&lt;p&gt;Andrea was now engaging in online communities focused on everything from open source to coding. With a combination of her do-it-yourself learning and mentor support her confidence increased. Furthermore, she believed her military background and entrepreneurial spirit made her special. But was she ready to apply for a job in tech?&lt;/p&gt;

&lt;p&gt;Then one day Andrea opened her inbox. She received a job announcement which had been forwarded to her by David Molina, Operation Code’s Founder &amp;amp; CEO. The employer was Github. Yes, Github; the multi-million dollar software company operating out of Silicon Valley. She was initially apprehensive about applying, mainly for family reasons. But after careful consideration and conversations with her supportive partner, she applied. After a four month process she received the job offer last November. “January 10th was my first day on the job” shares Andrea who credits Operation Code and the resources they shared with making the difference.&lt;/p&gt;</content><author><name>Edward Gutierrez</name></author><category term="Article" /><summary type="html">A search engine introduced Andrea to Operation Code. The former Army personnel manager had long contemplated a career change.</summary></entry><entry><title type="html">Tools For Pair Programming</title><link href="https://operationcode.org/blog/2016/10/18/tools-for-pair-programming.html" rel="alternate" type="text/html" title="Tools For Pair Programming" /><published>2016-10-18T00:00:00-07:00</published><updated>2016-10-18T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/10/18/tools-for-pair-programming</id><content type="html" xml:base="https://operationcode.org/blog/2016/10/18/tools-for-pair-programming.html">&lt;blockquote&gt;
  &lt;p&gt;“Why does this method keep returning undefined- it’s not supposed to do that!” I said one day, frustrated.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“What assumptions are you making that lead to this method returning a value other than undefined?” my pair asked.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Umm…because the function that calls the method is supposed to pass it an array, which it should get from the API call, which, umm… if it doesn’t return any data…”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Bugs are caused by difference between a programmer’s &lt;em&gt;expectation&lt;/em&gt; of what the computer will do and the *reality *of what the computer actually does, based of course, on instructions from the programmer. The difference between expectation and reality is usually due to incorrect assumptions.&lt;/p&gt;

&lt;p&gt;A good pair programming partner can expose assumptions that you were not even aware of because they force you to reason out loud, laying all your previously assumptions out, either verbally or written out on the whiteboard.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.wikiwand.com/en/Linus's_Law&quot;&gt;With enough eyes all bugs are shallow&lt;/a&gt;, mostly because if you have to defend your assumptions to another person, you’ll usually catch the incorrect ones.&lt;/p&gt;

&lt;p&gt;I’d like to share what I learned about *effective pair programming *my first six weeks at Hack Reactor, including how to make sure both you and your pair get value out of the practice and how to deliver a good product at the end of the day.&lt;/p&gt;

&lt;p&gt;Hack Reactor is a very high touch game. For the first six weeks, all your coding sprints are completed through pair programming, where two engineers work on the same code, sometimes even by looking at the same monitor.&lt;/p&gt;

&lt;p&gt;One engineer “drives”, which means they input all the code into the computer. The other engineer “navigates”, which means they don’t write any code. That frees them up to do other tasks like looking up documentation, or reviewing the coding being written for possible errors.&lt;/p&gt;

&lt;p&gt;Pair programming is useful not only because it makes it easier to find bugs, but also because it creates a system of continuous feedback, one of the main tenets of &lt;a href=&quot;https://www.wikiwand.com/en/Extreme_programming&quot;&gt;Extreme Programming&lt;/a&gt;. Because another engineer is always reviewing, the engineer in the driver’s seat has to write their code in logical ways. If they do something convoluted, they’ll be sure to get questions from their pair. Additionally, the engineer navigating has to justify their design decisions in real time such as, for example, to introduce some technical debt into the project in order to ship faster.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://medium.com/@JonDeng/veteran-imposter-syndrome-5cfc1465b014#.p8mqlxukf&quot;&gt;Because humans are social creatures who work best when accountable to others&lt;/a&gt;, pair programming, even though it is time expensive (it takes two engineers instead of one), can produce a higher quality end product. Additionally, and more importantly, both engineers walk away from the experience knowing a little bit more. Perhaps one of the engineers was a database ninja, but weak on the front-end, and she walked away with more comfort in JavaScript front-end frameworks. And maybe the other engineer was inefficiently doing a lot of manual tasks that his pair showed him how to automate away using cron jobs and a task runner like Gulp.&lt;/p&gt;

&lt;p&gt;In this &lt;a href=&quot;https://www.wikiwand.com/en/Extreme_programming&quot;&gt;Software Engineering Daily podcast&lt;/a&gt;, Fred George, the creator of Developer Anarchy, states that pair programming is useful because it allows all everyone on the team to learn from each other and become full stack engineers, instead of getting silo’d into specialties. Full stack engineers are more useful to the organization, not only because they can work in any part of the technology stack, but also while doing so they can pair with others, minting more full stack engineers.&lt;/p&gt;

&lt;p&gt;As a self-taught programmer, pair programming was initially a challenge for me because it forced me to clear the rubbish out of my thoughts, and express both my plans and assumptions in clear, understandable ways. But as I did it more, I think I got better at it, and I’d like to help you speed up your journey with some useful lessons that I picked up.&lt;/p&gt;

&lt;p&gt;And if you’re also a self-taught programmer, let me try to convince you that pair programming is the best way to improve your skills, whether you’re working with somebody more senior or junior to you. If you’re stuck far from a city with other developers, you can even pair program online, through programs like &lt;a href=&quot;https://www.quora.com/Is-pair-programming-a-part-of-the-program-requirements-for-Free-Code-Camp&quot;&gt;FreeCodeCamp&lt;/a&gt; and applications like &lt;a href=&quot;https://codeshare.io/&quot;&gt;codeshare.io&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;The lessons are:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;strong&gt;No feigned surprise&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Yes, and&lt;/strong&gt;&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Know when to step away from the computer.&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;no-feigned-surprise&quot;&gt;No feigned surprise&lt;/h3&gt;

&lt;p&gt;I got this rule from the user manual of the &lt;a href=&quot;https://www.recurse.com/manual&quot;&gt;Recurse Center,&lt;/a&gt; a programming retreat in New York City. I think it’s easier to demonstrate this rule than to explain it, with a hypothetical conversation between two developers:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Abel: So, I have this funny problem with transferring state from our Redux store to our React components…&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beryl: Oh, no problem. You just use the react-redux library and make a Provider component that connects the state between the store and components.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Abel: Umm, what’s a Provider?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beryl: What do you mean, what’s a Provider? Haven’t you been a developer for like 5 years?!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Obviously, not a useful response.&lt;/p&gt;

&lt;p&gt;Does it feel good to admit that you don’t know something, which is an act of courage and honesty, and then for them to reply: &lt;em&gt;what are you, some kind of dummy?&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The truth is there is a large universe of things to know as a developer (&lt;a href=&quot;https://hackernoon.com/how-it-feels-to-learn-javascript-in-2016-d3a717dd577f#.dzcodaf12&quot;&gt;one that’s growing exponentially in languages like JavaScript&lt;/a&gt;) and you can’t possibly know everything. Even senior developers, because things are changing so fast, might not know something a junior is an expert in.&lt;/p&gt;

&lt;p&gt;Feigning surprise in our hypothetical example created a missed opportunity for Abel to learn more about React and Redux, and for Beryl to achieve mastery of the subject by teaching Abel.&lt;/p&gt;

&lt;h3 id=&quot;yes-and&quot;&gt;Yes, and&lt;/h3&gt;

&lt;p&gt;I recently spent a Saturday night watching an &lt;a href=&quot;https://www.ucbtheatre.com/&quot;&gt;Upright Citizens Brigade&lt;/a&gt; show, and what fascinated me was that even though no explicit instructions were exchanged, both improv comics seamlessly kept the pacing of the show on point. In improv comedy, the goal is for both comics, neither of whom have a script, to explore the situation they find themselves in, adding details to the scene and slowly building up to more and more absurd circumstances (&lt;em&gt;Who brought fake blood to the wedding dress store and why was a banana peel conveniently left in the aisle?&lt;/em&gt;) until the hilarious finale. But, it’s not funny if the situation is ridiculous right away;&lt;a href=&quot;http://www.newyorker.com/magazine/2016/09/05/upright-citizens-brigades-comedy-empire&quot;&gt; you want to take the slow train to crazy town.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Same goes for building software on a short deadline. You want to fit as many features in as possible. But you can’t build a killer app in one step. You have to create the user story, whiteboard the idea, wireframe it, build an MVP. You want the slooooow train to crazy town.&lt;/p&gt;

&lt;p&gt;When working on a project with a partner it will almost always be the case that there will be reasonable disagreements. Instead of immediately advocating for your side, it can be useful to accept your partner’s position as true, and to riff off of that. This “acceptive brainstorming” often leads to better ideas than if each side had already made up their mind.&lt;/p&gt;

&lt;p&gt;This is the essence of the &lt;a href=&quot;https://www.wikiwand.com/en/Yes,_and...&quot;&gt;Yes, and rule&lt;/a&gt;, which means you never directly disagree with your partner at first, but instead continue the brainstorming while accepting their assertion on the face. I find I often learn more by exploring and often times accepting my partner’s plan rather than blindly advocating for my own.&lt;/p&gt;

&lt;p&gt;For example:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Abel: I think we should use a graph database here.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beryl: (trying not to roll her eyes, because her initial thought is that this is the stupidest idea ever) Hmmm. Interesting, why do you think so?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Abel: Well, with a relational database we could store all the users pretty well, but it would be expensive to map all the relationships between them- a graph database would be better.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beryl: Wait, we’re storing relationships between users?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Abel: Well, if we did, we could do a lot of really cool machine learning stuff to optimize the experience.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Beryl: (excited about the idea now) Oh, like we could optimize everyone’s landing page to show updates from people in their network! That would be sick.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;know-when-to-step-away&quot;&gt;&lt;strong&gt;Know when to step away&lt;/strong&gt;&lt;/h3&gt;

&lt;p&gt;I learned in the Army that being angry and tired is not a good reason to not get the job done. But I also learned that it’s illogical to keep pounding your head on something in a counterproductive way.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Now is better than never.
Although never is often better than *right* now. 
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yes, you have a deadline. Yes, programming is not always fun. Sometimes you’re tired, and have a headache and a mental block. You may be tempted to lash out at your partner, because its convenient.&lt;/p&gt;

&lt;p&gt;But you can take a 5 minute break, go walk outside, call a friend to vent, run laps around the building. Working together doesn’t mean that you’re tied together, and sometimes you need a timeout. If you’re ever tempted to say something snarky, or find you don’t have the energy to uphold the two rules above (No feigned surprise and Yes, and) you need to take a break.&lt;/p&gt;

&lt;p&gt;It will help you think.&lt;/p&gt;

&lt;p&gt;And you will also avoid saying something you can’t take back.&lt;/p&gt;

&lt;p&gt;If you can’t be a good person, step away from the computer for awhile. There’s a whole world outside, and it’s good to keep that in perspective.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;That’s it.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;No feigned surprise&lt;/li&gt;
  &lt;li&gt;Yes, and,&lt;/li&gt;
  &lt;li&gt;Take breaks as you need them.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Oh, and try to learn as much as you can from your partner, and teach them as much as you know. The rest you can pick up as you go along 😜.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re interested in learning JavaScript web development along with me, follow me on *&lt;a href=&quot;https://twitter.com/jondeng&quot;&gt;Twitter&lt;/a&gt;&lt;/em&gt; and &lt;em&gt;&lt;a href=&quot;https://medium.com/@JonDeng&quot;&gt;Medium&lt;/a&gt;&lt;/em&gt;!*&lt;/p&gt;</content><author><name>Jon Deng</name></author><category term="Article" /><summary type="html">“Why does this method keep returning undefined- it’s not supposed to do that!” I said one day, frustrated.</summary></entry><entry><title type="html">What One Dark Night with the Army Taught Me About Shipping Software</title><link href="https://operationcode.org/blog/2016/09/30/what-one-dark-night-with-the-army-taught-me-about-shipping-software.html" rel="alternate" type="text/html" title="What One Dark Night with the Army Taught Me About Shipping Software" /><published>2016-09-30T00:00:00-07:00</published><updated>2016-09-30T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/09/30/what-one-dark-night-with-the-army-taught-me-about-shipping-software</id><content type="html" xml:base="https://operationcode.org/blog/2016/09/30/what-one-dark-night-with-the-army-taught-me-about-shipping-software.html">&lt;p&gt;Not many people know I spent time in the Army many moons ago. I guess I don’t look much like G.I. Joe, so I can appreciate their surprise when this is uncovered. Nevertheless, it’s true; I joined the military six years ago.&lt;/p&gt;

&lt;p&gt;Naturally, I learned a lot— more things than I had anticipated. But what’s been most surprising is how the half-life for these lessons has extended beyond the barracks and STX (situational training exercises). I probably shouldn’t be surprised, but they’ve been useful in my day-to-day work.&lt;/p&gt;

&lt;p&gt;I thought I’d share one of those experiences.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;I now work as a Product Manager for a growing software company. The two worlds don’t seem obviously-related. They aren’t at first glance. I don’t wear a uniform, and I don’t have to shave every morning (thank. god.). There are no guns or Humvee’s. Despite this, it’s been sort-of-astonishing how many times I’ve connected something back to an experience I had in the Army.&lt;/p&gt;

&lt;p&gt;Recently, our team has struggled with the idea of how much “process” we want. There was a vague understanding that more was needed, but exactly “how much” was left to debate. Some? A smidgen? A lot? There was no clear-cut answer. There rarely is.&lt;/p&gt;

&lt;p&gt;For context, we’ve been growing quickly since we launched our product in 2009. We added seventy-five new teammates just this past year. As the team grows, things understandably get more complicated. Communication becomes more difficult. Decisions can take longer. There are more viewpoints to account for. Like anything, there are trade-offs. There is also more collective experience. More diversity in thought. More hands to help.&lt;/p&gt;

&lt;p&gt;Our application is also segmented into three smaller products, and the needs, constraints, maturation, and user expectations for the three aren’t always the same. This poses a challenge to deciding how we want to update and maintain the application. We are one team, with one code base, three primary products, and many different visions for how much process we need on the dev side of the house. Do we need managers? Should we all be forced to use the same release process? Do we need to build specialized development tools? We even joke that one engineer was named “Rules” while the other should be called “Guidelines.” We are at an impasse.&lt;/p&gt;

&lt;p&gt;Somehow this triggered a memory from the Army in my strange brain.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Flash back to 2010. There I am. Twenty-two, clean shaven, wide-eyed. The very picture of youth. (haha) I’m at Fort Knox, Kentucky. It’s July — that means the ambient temperature is “face-of-the-sun” and the humidity is at “monsoon rain storm.” I’m miserable.&lt;/p&gt;

&lt;p&gt;There are dozens of young soldiers just like me spread out, lying prone on the gravel that borders the edge of a jungle that looms just in front of us. Our dirty, “digital” uniforms and patrol caps blend in with the grey color of the gravel, and we look like a peculiar pattern of many-colored faces dotting the ground. It’s dusk, and soon each face is accompanied by a sudden eerie red glow — the filtered light coming from each of our flashlights. There’s something alien about it all. We’re all silently scribbling and making notations on small maps laid out in front of us. No one speaks. Shortly after, one of us abruptly gets up and heads steadfast into the dark forest. It swallows him whole. The only thing you can see is that red orb bouncing up-and-down and then disappearing into the black. Soon after, another soldier sprints into the forest. She’s gone. Then another. One-by-one we‘re all eventually consumed by the jungle. We’re all after something.&lt;/p&gt;

&lt;p&gt;We were practicing something called “night land nav.” — one of the many fun things you’re introduced to in the military. It’s the Army’s twist on hide-and-go-seek. You’re taught how to get around using a map, protractor, and a Tritium-illuminated Lensatic Marching Compass. It makes sense, really. Soldiers should be able to get to important way-points.&lt;/p&gt;

&lt;p&gt;The objective is to locate several small metal stakes hidden throughout the terrain. The stakes are each separated by several kilometers, obscured by vegetation, and are only a meter tall. Each is equipped with an alpha-numeric label and a “clacker” that you use to stamp a card you’ve been given to verify you’ve found an assigned way-point. You can only use red-colored light, or else you’d compromise your night vision. It’s an individual endeavor. You aren’t allowed to collaborate; you can’t consult your battle buddy. There’s a time limit.&lt;/p&gt;

&lt;p&gt;Truth be told, this was one of my favorite exercises. I love being outdoors. I enjoy having a clear purpose, and I liked the time to myself (something that’s a rarity in the Army). I also had a natural affinity for it; I am a stake-locating machine.&lt;/p&gt;

&lt;p&gt;Obviously, the Army doesn’t point young soldiers toward the jungle and tell them, “Good luck.” Prior to stepping off we’re all prepared with some simple tactics we can employ to accomplish our task. (Gasp! A small process of sorts.) Simple tactics.&lt;/p&gt;

&lt;p&gt;It’s fairly basic in theory, and somewhat more complicated in practice. You have a map that’s divided into equal-sized squares. The squares are organized into a grid, and the grids all have corresponding coordinates. This is the &lt;a href=&quot;https://en.wikipedia.org/wiki/Military_grid_reference_system&quot;&gt;Military Grid Reference System&lt;/a&gt; (MGRS). You’re provided a sheet of paper with several eight-digit grid locations for your stakes. The eight-digit location is accurate to within ten meters (around thirty feet). You start by sitting down and using your protractor and pencil to plot your points on the map and get a lay of the land. You usually take note of identifiable terrain features — like spurs, draws, hilltops, cliffs, saddles. You can triangulate your position on the map by using these landmarks later on. You’re taught how to measure distance by walking a hundred meters and counting the number of times your left foot strikes the ground. (My pace count is sixty-three left steps to every hundred meters.) The lensatic compass allows you to determine direction. You formulate a basic plan, and then head off.&lt;/p&gt;

&lt;p&gt;There I was. It was hot outside. My uniform’s coarse cloth was now heavy and sticking against my skin, which irritated the many insect bites peppered along my arms and legs. I only had a few hours to find the stakes spread out across the Ft. Knox jungle.&lt;/p&gt;

&lt;p&gt;Like the others, I was lying prone on the gravel, which made it difficult to lay the map flat. It was hard to make out the green-colored terrain markings in the red light. The pencil couldn’t be bothered to work in the rain. But I got it done. I made a basic plan. I had a way forward, and I headed off into the darkness.&lt;/p&gt;

&lt;p&gt;My plan went to shit pretty quickly. The route I had planned was flooded at a certain point, and I had to take a long detour. The clearing I had wanted to traverse as a shortcut was now overgrown. My current circumstances forced me to reevaluate. Improvise. Adapt. I persevered onward. I trusted myself to overcome the obstacles. I still had the same simple strategies I could use over and over again to reshape my plan.&lt;/p&gt;

&lt;p&gt;Sometimes my new plan would work as if by magic or divine intervention. Everything went smoothly. I’d shoot an azimuth, count my steps, and would be rewarded with a satisfying CLACK at the stake. Success. I was learning. I realized I could anticipate where flooding might be by looking closer at the contour lines that indicated elevation on the map. Even still, the plan would inevitably turn to shit again.&lt;/p&gt;

&lt;p&gt;No kidding, my flashlight broke. I could hear the pieces rattling inside the housing. Its music seemed to celebrate and mock my impending doom. Luckily, the Army preaches “one is none; two is one.” I had a back up, but this light was much smaller and less powerful. It was almost impossible to see. My fortune had turned; the land-nav gods had looked down on me again. Nonetheless, I steadily reached my way-points.&lt;/p&gt;

&lt;p&gt;A few hours later, you could hear me crashing through the forest like a drunken bear. I was sprinting wildly toward my last point. I was in a foot race against time. The amazing thing was I didn’t have any discomfort. I wasn’t over-heated anymore. I didn’t notice the insect bites. The rain didn’t bother me. I later discovered I had formed a blister on the bottom of my left foot that spanned its entire length. It had swelled up and deflated like a forgotten birthday balloon. I hadn’t noticed. I hadn’t noticed because I was absolutely focused on the task at hand. I was like Gollum in pursuit of the One Ring.&lt;/p&gt;

&lt;p&gt;I arrived to a small opening in the woods. Panting. Crazed. Wild-eyed. My calculations had indicated my last stake would be nearby. But where was it? Had my faulty plan betrayed me again? Had my compass broken, and led me astray? I could have panicked. I nearly did. Instead, I returned to my simple strategies.&lt;/p&gt;

&lt;p&gt;Remember, the eight-digit grid is only accurate to within ten meters. I had been taught how to handle this. I just needed to make slowly-widening concentric circles around where I thought the point should be. Eventually, I’d have to run into the stake as I completed my orbits.&lt;/p&gt;

&lt;p&gt;I made one loop.&lt;/p&gt;

&lt;p&gt;Nothing.&lt;/p&gt;

&lt;p&gt;Faithfully, I made two more loops.&lt;/p&gt;

&lt;p&gt;Not a thing.&lt;/p&gt;

&lt;p&gt;I started to doubt. I had to continue on.&lt;/p&gt;

&lt;p&gt;At the start of my next cycle my boot struck something. It struck victory. (haha) My nemesis now stood at my feet. Its little steel body was twisted downward toward the wet ground and was partially covered with undergrowth — making it difficult to see. But its trickery had been no match for this cool-headed warrior. I bent down and moved the brush aside.&lt;/p&gt;

&lt;p&gt;“A15”&lt;/p&gt;

&lt;p&gt;I’d remember the name. May it R.I.P. (This foe.) I grabbed the clacker, punched my card, and began the long trek back to the staging area.&lt;/p&gt;

&lt;p&gt;A while later I returned to where it had all started. The eerie red glow had been replaced with an inky purple in the absence of the many flashlights. I turned my card in, changed out of my wet uniform, and unpacked my sleep system. Exhausted, I crawled into the camouflaged bivy sack and quickly drifted off to sleep. The clouds had cleared by now. (Of course, that was my luck.) I remember the upright trees had cut the silhouette of an elephant into the night sky — its trunk spotted with a famous constellation.&lt;/p&gt;

&lt;hr /&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Cool story, bro. But what’s this got to do with the maintenance of software?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Okay, okay. I admit: I’ve been a bit tangential. I’ll loop it back now. How does this story relate to that dilemma at work — the impasse? For a while, I wasn’t sure where I stood on the whole thing. On one hand, It would be nice to have some clear-cut rules. On the other hand, I was afraid we’d end up creating miles of red tape. I mulled it over. It wasn’t an easy problem; there were merits on both sides. I realized my brain had done me a solid by dredging up this old memory. There was something to be learned here.&lt;/p&gt;

&lt;p&gt;It became more clear the more I contemplated it. My thoughts began to take shape.&lt;/p&gt;

&lt;p&gt;Here’s what I came up with:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Simple strategies trump rigid processes&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There wasn’t one magical solution that helped me find my way. I didn’t set out thinking, “I will walk 50 meters, pull out my compass, shoot a 178-degree bearing, put the compass in my left pocket, take a sip of water, continue 43 meters…” I knew I’d be prepared no matter what happened because I had a set of straightforward principles I could rely on. Any complicated process would have been too costly to use out there when it mattered.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Most soldiers found their way, but took different paths.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There were dozens and dozens of soldiers wandering the forest that night. None of us had the same combination of way-points, but the objective was the same: find all the points. How we got there was irrelevant. None of us had the same route. Each solider took the path that made the most sense given their starting point and their unique set of constraints and conditions. I’m sure some learned the hard way, but we were better for it in the long run. We could share the lessons we learned. The best solution is tailored to the surrounding circumstance.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Start with a basic plan, and anticipate it will change.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My plan fell apart umpteen times. I anticipated it would, and that made it easier to adapt. A plan is a starting point. I would have failed and run out of time if I had spent too much effort devising the “perfect plan.” It was important to just start moving.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;You don’t need fancy tools.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Would it have been easier if I had a GPS and four-wheeler? Definitely. Was the compass, flashlight, map, and “know how” enough to get the job done? It was. I was able to hone my skills because I was forced to rely on simple strategies and basic tools. I became a better navigator because of it. Better tools would have made me more efficient, but they also would represent new complexities and points of failure — points of failure I likely wouldn’t have been able to overcome without a deeper understanding of terrain, map-reading, pace counts, etc. Tools can supplement understanding, but are not a replacement for it.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Focus can override discomfort.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;My discomfort diminished as the night wore on. I barely noticed the heat, weather, or exhaustion. I became so focused on my task that I couldn’t be bothered to be distracted by anything else. Similarly, teams can withstand a lot if they’re focused on a clear goal — everything else (the disagreements, lack of resources, etc.) take a backseat.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;Do I think we need managers (in the traditional sense)? Nah. Do I think we need a process, or set of processes, that can be applied universally? Probably not; I believe there’s a balance, and that each small team can decide what works best for them and their unique context. What about development tools? I think we can get by with something lightweight, and build from there.&lt;/p&gt;

&lt;p&gt;This is just my position. Our team is still wrestling with this. We haven’t arrived to a decision. Overall, I’m thankful I work with people who care enough to have a stance, and I’m confident everything will work out. If someone like me can find a one-meter-tall stake in the ground. In a jungle. At night. In the rain. With just a compass, map, and a few basic strategies. Then I’m sure we can figure things out.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;em&gt;Let’s get more people involved in tech. Support veterans learning to code by checking out &lt;a href=&quot;https://www.operationcode.org&quot;&gt;Operation Code&lt;/a&gt;, and help “increase the number of women of color in the digital space” by supporting &lt;a href=&quot;http://www.blackgirlscode.com&quot;&gt;Black Girls Code&lt;/a&gt;. Follow me on &lt;a href=&quot;https://twitter.com/BaxterMante&quot;&gt;Twitter&lt;/a&gt;.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;</content><author><name>Baxter Mante</name></author><category term="Article" /><summary type="html">Not many people know I spent time in the Army many moons ago. I guess I don’t look much like G.I. Joe, so I can appreciate their surprise when this is uncovered. Nevertheless, it’s true; I joined the military six years ago.</summary></entry><entry><title type="html">Developer Goals 2016</title><link href="https://operationcode.org/blog/2016/09/29/developer-goals-2016.html" rel="alternate" type="text/html" title="Developer Goals 2016" /><published>2016-09-29T00:00:00-07:00</published><updated>2016-09-29T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/09/29/developer-goals-2016</id><content type="html" xml:base="https://operationcode.org/blog/2016/09/29/developer-goals-2016.html">&lt;p&gt;Starting Hack Reactor, I wrote down a few back-of-the-envelop goals that I wanted to accomplish by the end of the year. Since starting, I’ve talked to a lot of developers, read a lot of blogs, and let my mind wander during my morning runs. Despite attending a boot camp (which has been an invaluable learning experience!), I still want to maintain the ethic of a self-taught programmer, who makes it a personal responsibility to teach him/herself the skills to become successful.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;My main intention remains unchanged. I want to become a software engineer who:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;is comfortable learning new technologies and developing in them despite not being an expert yet&lt;/li&gt;
  &lt;li&gt;relishes the hunt of debugging and figuring why software is not acting according to expectations&lt;/li&gt;
  &lt;li&gt;plays well with others — empathetic, fun to work with, and pushes the team forward in moments of indecision&lt;/li&gt;
  &lt;li&gt;clearly communicates complex topics so that people who are exposed to the concept for the first time can understand. Also, speak in a way that gets non-technical people stoked about technical projects!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;However, now that I’ve had more exposure to what’s possible in web development, I added a few experiences/ projects that I want to make a priority over the next few months.&lt;/p&gt;

&lt;p&gt;Goals kept secret have a way of disappearing or getting rationalized away when things get busy, so in order to make sure I stay committed to them, &lt;strong&gt;I’m posting them publicly:&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Create a non-trivial React application with Redux as a state-container and Node as the back-end. This project needs to be well-documented, organized, and have a testing suite.&lt;/li&gt;
  &lt;li&gt;Explore alternative ways of User Interface that are not just browser-based webpages. Either build a mobile project with React Native, a server-side chatbot project, or combine both.&lt;/li&gt;
  &lt;li&gt;Create a useful developer tool that abstracts away a pain point in the development process. Publish this this tool into an npm package that gets 1000 downloads.&lt;/li&gt;
  &lt;li&gt;Continue to produce blog posts that provide value for other developers coming from non-traditional paths, especially veterans, and help solidify my mastery of concepts by using the learning by teaching approach.&lt;/li&gt;
  &lt;li&gt;Maintain my mental, emotional and physical health to allow me to continue to be a good person in stressful situations.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;That’s it! There’s a few other things I’d like to do- continue to contribute to Operation Code, look for apartments in LA, run another ultra-marathon- but for the next few months, those are going to have to take a backseat to priorities.&lt;/p&gt;

&lt;p&gt;If you’re also becoming a self-taught developer, I’d love to see what your short term goals are- just drop a link in the comments section! I think planning in 3-month intervals allows you to stay flexible and keep yourself accountable over the short term.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If you’re interested in learning JavaScript web development along with me, follow me on &lt;a href=&quot;https://twitter.com/jondeng&quot;&gt;Twitter&lt;/a&gt; and &lt;a href=&quot;https://medium.com/@JonDeng&quot;&gt;Medium&lt;/a&gt;!&lt;/em&gt;&lt;/p&gt;</content><author><name>Jon Deng</name></author><category term="Article" /><summary type="html">Starting Hack Reactor, I wrote down a few back-of-the-envelop goals that I wanted to accomplish by the end of the year. Since starting, I’ve talked to a lot of developers, read a lot of blogs, and let my mind wander during my morning runs. Despite attending a boot camp (which has been an invaluable learning experience!), I still want to maintain the ethic of a self-taught programmer, who makes it a personal responsibility to teach him/herself the skills to become successful.</summary></entry><entry><title type="html">Meet CodeConf LA Attendee, Conrad Hollomon</title><link href="https://operationcode.org/blog/2016/06/27/meet-codeconf-la-conrad-hollomon.html" rel="alternate" type="text/html" title="Meet CodeConf LA Attendee, Conrad Hollomon" /><published>2016-06-27T00:00:00-07:00</published><updated>2016-06-27T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/06/27/meet-codeconf-la-conrad-hollomon</id><content type="html" xml:base="https://operationcode.org/blog/2016/06/27/meet-codeconf-la-conrad-hollomon.html">&lt;p&gt;My name is Conrad Hollomon, born and raised in Virginia Beach VA. I’m a US Army officer, currently on reserve status, one tour in Afghanistan from 2010-2011. In the military, I led IT and tactical communications teams, and worked hard to develop my fellow Soldiers and help them reach their full potential.&lt;/p&gt;

&lt;p&gt;I’m currently working for a venture-backed energy tech startup called SparkMeter, developing a smart metering system that’s being widely adopted by utilities serving customers in rural parts of Asia, sub-Saharan Africa, and Latin America and the Caribbean. It’s a great product that will help expand access to electricity for developing countries and emerging markets.&lt;/p&gt;

&lt;p&gt;I’ve been fascinated by technology since I was a kid, and throughout the years, that’s never changed. I got started in the tech industry working in QA at a video game developer called Harmonix Music Systems, where I learned what it was like to develop innovative products, and how engineers and designers came together to deliver awesome experiences for people. Ever since, I’ve been dedicated to helping people build great products, working hard to be a positive driving force for any team, by bringing an creative, collaborative, and decisive mindset to the table. The experience has taught me that innovation originates from inspiring leadership, and that inspiring leadership originates from service to others. This takes integrity, authenticity, and just a little bit of audacity, too. Why CodeConfLA?&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;Github is a cornerstone of the open source community, and having the opportunity to be a direct part of that community via this scholarship is a great honor. The way we build and design software has such a tremendous impact on the end product that users see, and use, and love - finding ways to learn from each other, finding ways to build cool things better and faster, is a true joy.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;Conrad Hollomon is a test engineer for SparkMeter, an Army Officer and an operations volunteer for Operation Code. He resides in Boston, Massachusetts and is &lt;a href=&quot;https://twitter.com/hollomancer&quot;&gt;@hollomancer&lt;/a&gt; on Twitter.&lt;/em&gt;&lt;/p&gt;</content><author><name>Conrad Hollomon</name></author><category term="News" /><summary type="html">My name is Conrad Hollomon, born and raised in Virginia Beach VA. I’m a US Army officer, currently on reserve status, one tour in Afghanistan from 2010-2011. In the military, I led IT and tactical communications teams, and worked hard to develop my fellow Soldiers and help them reach their full potential.</summary></entry><entry><title type="html">Google for Nonprofits</title><link href="https://operationcode.org/blog/2016/06/17/google-for-nonprofits.html" rel="alternate" type="text/html" title="Google for Nonprofits" /><published>2016-06-17T00:00:00-07:00</published><updated>2016-06-17T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/06/17/google-for-nonprofits</id><content type="html" xml:base="https://operationcode.org/blog/2016/06/17/google-for-nonprofits.html">&lt;p&gt;Google is known for search. When we get stuck coding we Google every command line or inspect element error which leads to a blog, StackOverFlow, YouTube video, an article or a podcast that helps us get closer to the solution.&lt;/p&gt;

&lt;p&gt;Google is &lt;em&gt;also&lt;/em&gt; known for helping nonprofits get more done through the &lt;a href=&quot;https://www.google.com/nonprofits/&quot;&gt;Google for Nonprofits&lt;/a&gt; program.&lt;/p&gt;

&lt;p&gt;Prior to being enrolled in the program, we paid monthly to have a few email accounts for the team and this limited us in terms of growth and volunteer staff. That all just changed.&lt;/p&gt;

&lt;p&gt;These past two weeks Operation Code has grown leaps and bounds organizationally, as we started issuing Operation Code email accounts to the software mentorship, scholarship, employer services, deploy and advocacy teams. Google for Nonprofits is enabling Operation Code to better coordinate, integrate and synchronize our services to better serve our military veterans coding community.&lt;/p&gt;

&lt;p&gt;From their web page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Google for Nonprofits offers organizations like yours free access to Google tools like Gmail, Google Calendar, Google Drive, Google Ad Grants, YouTube for Nonprofits and more. These tools can help you reach new donors and volunteers, work more efficiently, and tell your nonprofit’s story.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you so much, Google, for helping us in changing the world for those who’ve served our country.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;David Molina is Founder and Executive Director of Operation Code, and an ex-Army Captain. He resides in Portland, Oregon.&lt;/em&gt;&lt;/p&gt;</content><author><name>David Molina</name></author><category term="News" /><summary type="html">Google is known for search. When we get stuck coding we Google every command line or inspect element error which leads to a blog, StackOverFlow, YouTube video, an article or a podcast that helps us get closer to the solution.</summary></entry><entry><title type="html">Node Summit</title><link href="https://operationcode.org/blog/2016/06/08/node-summit-sf.html" rel="alternate" type="text/html" title="Node Summit" /><published>2016-06-08T00:00:00-07:00</published><updated>2016-06-08T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/06/08/node-summit-sf</id><content type="html" xml:base="https://operationcode.org/blog/2016/06/08/node-summit-sf.html">&lt;p&gt;Along with teaching coding skills, Operation Code is also dedicated to setting up networks for our military veterans.  One of the best ways to grow a network is to attend a technical conference.&lt;/p&gt;

&lt;p&gt;We are delighted that &lt;a href=&quot;http://nodesummit.com/&quot;&gt;Node Summit&lt;/a&gt; - which will be held on July 26-28 in San Francisco, CA - has granted us four scholarship tickets for use by our veterans.&lt;/p&gt;

&lt;p&gt;From their web page:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;“Node.js has taken its rightful place within critical enterprise environments and is well into “prime time”. Node Summit 2016 will bring together technology and business leaders and technology experts to discuss Node.js’ transformative role in the future of computing.”&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Thank you so much, Node Summit, for providing the means for our veterans to learn and grow.  We will see you there!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Nell Shamrell-Harrington is a volunteer and scholarship committee chair of Operation Code. She is the proud daughter of two Air Force officers. She resides in Seattle, WA.&lt;/em&gt;&lt;/p&gt;</content><author><name>Nell Shamrell-Harrington</name></author><category term="News" /><summary type="html">Along with teaching coding skills, Operation Code is also dedicated to setting up networks for our military veterans. One of the best ways to grow a network is to attend a technical conference.</summary></entry><entry><title type="html">TechSoup</title><link href="https://operationcode.org/blog/2016/05/20/techsoup.html" rel="alternate" type="text/html" title="TechSoup" /><published>2016-05-20T00:00:00-07:00</published><updated>2016-05-20T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/05/20/techsoup</id><content type="html" xml:base="https://operationcode.org/blog/2016/05/20/techsoup.html">&lt;p&gt;Operation Code Joins the TechSoup Community&lt;/p&gt;

&lt;p&gt;Learning to code is hard. This is further exacerbated by antiquated hardware and software. As a coding nonprofit serving the nation’s finest and their families, we’re always looking for new ways to partner and work with passionate businesses and organizations that care and help us meet our mission. Fortunately, there is TechSoup.&lt;/p&gt;

&lt;p&gt;TechSoup is a nonprofit with a clear focus: to make it as easy as possible for other nonprofits and libraries to obtain and use the technologies they need to achieve their missions. TechSoup provides access to over 400 technology products donated by more than 45 companies, including donor partners like Microsoft, Adobe, Cisco, Intuit, and Symantec. Read about their &lt;a href=&quot;http://www.techsoup.org/community/success-stories&quot;&gt;success stories&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We are so very thrilled to join such as an amazing service and community of like-minded nonprofits who are building a more incredible and inclusive place to live and work. Special thanks to Sam over at &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt; who pointed us towards this wonderful organization, and the wonderful support team at TechSoup for getting us squared away.&lt;/p&gt;

&lt;p&gt;Cheers and keep coding,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;David Molina is Founder and Executive Director at Operation Code, and an ex-Army Captain. He resides in Portland, Oregon.&lt;/em&gt;&lt;/p&gt;</content><author><name>David Molina</name></author><category term="News" /><summary type="html">Operation Code Joins the TechSoup Community</summary></entry><entry><title type="html">Slack</title><link href="https://operationcode.org/blog/2016/05/20/slack.html" rel="alternate" type="text/html" title="Slack" /><published>2016-05-20T00:00:00-07:00</published><updated>2016-05-20T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/05/20/slack</id><content type="html" xml:base="https://operationcode.org/blog/2016/05/20/slack.html">&lt;p&gt;Operation Code 10k Slack Message Limit is History&lt;/p&gt;

&lt;p&gt;Our Software Mentor Protégé Program leverages real-time messaging application, &lt;a href=&quot;https://slack.com&quot;&gt;Slack&lt;/a&gt;, to welcome transitioning military, guard &amp;amp; reserve soldiers, veterans and their families share code and get help hacking on their websites or web applications, quickly communicate between volunteers and the board, all in a decentralized, asynchronous platform.&lt;/p&gt;

&lt;p&gt;Earlier last year iOS/Android developer &lt;a href=&quot;https://github.com/nanoxd&quot;&gt;Fernando Paredes&lt;/a&gt; setup Slack and seamlessly integrated it into our Ruby on Rails application so that each time a new veteran joined, he/she would get an immediate invite and join us. But as you can imagine we quickly capped the 10k message limit prohibiting anyone to see past a few page scrolls. Last summer I sent over a request to Slack, but due to tax-exemption status couldn’t get it lifted. Fortunately, all that changed earlier this month with the IRS approving our tax-exemption.&lt;/p&gt;

&lt;p&gt;Slack added fully searchable archive w/ unlimited messages, unlimited external integrations, simple usage statistics, custom message retention policies, guest access, and premium support to Operation Code’s Slack channel. As a result new channels are being created to better serve our military veterans community and their pursuit for becoming programmers. The latest channel: eloquent-javascript.&lt;br /&gt;
New military veterans who just joined Operation Code will now enjoy a more seamless experience and so will our &lt;a href=&quot;https://github.com/OperationCode/operationcode/graphs/contributors&quot;&gt;contributors&lt;/a&gt; in adding new Slack external functionalities. Special thanks to the incredible team at Slack for always being helpful and for an incredible and ever useful tool that allows all of us who’ve served or are serving from all corners of the globe to learn to code and help the transition to become programmers less painful.&lt;/p&gt;

&lt;p&gt;Cheers and keep coding,&lt;/p&gt;

&lt;p&gt;&lt;em&gt;David Molina is Founder and Executive Director at Operation Code, and an ex-Army Captain. He resides in Portland, Oregon.&lt;/em&gt;&lt;/p&gt;</content><author><name>David Molina</name></author><category term="News" /><summary type="html">Operation Code 10k Slack Message Limit is History</summary></entry><entry><title type="html">Benefits Creep, Part I</title><link href="https://operationcode.org/blog/2016/05/14/benefits-creep-part-1.html" rel="alternate" type="text/html" title="Benefits Creep, Part I" /><published>2016-05-14T00:00:00-07:00</published><updated>2016-05-14T00:00:00-07:00</updated><id>https://operationcode.org/blog/2016/05/14/benefits-creep-part-1</id><content type="html" xml:base="https://operationcode.org/blog/2016/05/14/benefits-creep-part-1.html">&lt;p&gt;Benefits-Creep Part I: Why Non-Profit Perks Go Up When They Shouldn’t&lt;/p&gt;

&lt;p&gt;Much of the country was shocked this month to hear about the mismanagement of a large veterans’ non-profit organization.  Sadly, this was not shocking news to the veteran community, which had a long growing suspicion that this organization was spending too much money on lavish benefits for its leaders and staff.   Like many organizations, it had lost its way – getting caught up in its own success and giving the appearance that its leaders were more interested in serving themselves and not veterans.  In contrast to mission-creep, where an organization gets farther and farther from its core mission, this is “Benefits-Creep” in which an organization over-expands the perks it offers to leadership and staff.&lt;/p&gt;

&lt;p&gt;For most of us who found or start working for non-profits, we do so with the best intentions at heart.  With success, however, it becomes easier to justify expenses that in the beginning we never would have considered.  There are a few reasons for benefits-creep:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;More money.  With more money, “luxury” expenses become easier to afford.  Also, if looked at as a percentage of the budget, expenses may even go down as the quality of things like hotels, dinners, and flights increase.  Clearly, many non-profit leaders are falling into the trap of setting expenses by a percentage of budget rather than by need.  Under a percentage allocation, if a travel budget of $1,000 can be justified on a $10,000 budget, then when the budget is $100,000, these leaders think is perfectly OK to spend $10,000.  While that may be true for business owners who get to reap the rewards of their increased profits, it is not true for non-profits who must also be looking to serve the public and must guard against percentage-based benefits-creep.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The new normal.  Imagine a non-profit that is going through growing pains.  Maybe its management is having trouble dealing with expanded numbers of staff, or perhaps turnover has caused morale problems.  In order to fix these problems, which are having a real impact on the non-profit’s ability to provide services, leadership determines to have a “retreat” to refocus. Maybe they go to a leadership camp or fly-in the whole board for a team building weekend. While this is more expensive than their normal travel budgets, it may be entirely legitimate and help fix issues. The problem comes the following year:  there is no major issue but everyone remembers how nice last year’s event was.  Who wants to have a day long retreat in town, when last year’s weekend event by the lake was so much fun?  Once again, the travel budget goes up, and the following year it goes up again.  In this case, something that was meant to be an exception to policy became the new normal.  The new normal can cause benefits-creep almost anywhere in the budge from travel, dinners, snacks in the kitchen, to even who gets what type of office chair.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Outside influence and Expert Volunteers.  As a non-profit grows, more people are going to be interested in helping it. These may be business leaders that want to serve on the board or upper-income volunteers that want to help with events.  These volunteers are critical to an organization’s growth:  they help raise expectations, diversify funding streams, expose the organization to new management paradigms, and provide critical staff-power.  Operation Code is experiencing such an influx right now in its JAG Brigade, which has greatly increased its capability by adding lawyers who are volunteering from Hunton &amp;amp; Williams, one of the largest and best law firms in the country. Operation Code’s JAG Brigade is meant to do two things:  1. provide legal services to veterans in software development that have legal issues, such as incorporating their own business  or protecting intellectual property, and 2. assist coding schools with filing to be eligible to receive the G.I. Bill so veterans can use their benefits to learn to code.  Obviously, having top notch attorneys such as Penn Law graduate, Stefano D’Aniello, or Yale Law alum, Jordi Martinez-Cid, is critical to providing veterans the best legal support on these issues, but top law firms operate on radical different budgets than non-profits.  This budget gap may lead to different expectations.   The JAG Brigade is blessed – its volunteers from Hunton &amp;amp; Williams are down to earth attorneys and Hunton &amp;amp; Williams has a great deal of experience in helping small organizations and veterans.  Not every non-profit will be so lucky in getting expert volunteers with realistic expectations.  Leadership must help manage the expectations of successful leaders and experts brought in to help the organization.  Too often wealthy benefactors may suggest either budget busting endeavors or the expansion of small non-essential items that lead to inappropriate benefits-creep.  This is especially important to watch for as often these benefactors will offer to fund the extra benefits, and so it will seem to the non-profit that there is no harm.  However, perception can quickly become reality and explaining to other donors or the IRS how the retreat to a luxury resort was ear-marked by a donor that picked up the extra cost is not a good position to be in.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Regardless of the source of benefits-creep, it can be dangerous to an organization’s bottom-line, its perception in the community, and worst of all to its legal standing.  Non-profit leaders must continually be managing both budgets and expectations to stop benefits-creep.  In Part II of this series, I walk through the strategies Operation Code has put in place to stop benefits-creep and ensure that when budgets go up our beneficiaries are the ones that benefit.&lt;/p&gt;

&lt;p&gt;These are three reasons non-profits succumb to benefits-creep.  Please share your experiences with how you have seen benefits-creep impact non-profits.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Mark Kerr is Chairman of the Operation Code Board of Directors, Development Advisor to U.S. Southern Command, and an Iraq &amp;amp; Afghanistan war Army veteran. He resides in Miami Beach, Florida.&lt;/em&gt;&lt;/p&gt;</content><author><name>Mark Kerr</name></author><category term="News" /><summary type="html">Benefits-Creep Part I: Why Non-Profit Perks Go Up When They Shouldn’t</summary></entry></feed>